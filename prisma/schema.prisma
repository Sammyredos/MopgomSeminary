generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String    @id @default(cuid())
  email     String    @unique
  password  String
  name      String
  roleId    String?
  isActive  Boolean   @default(true)
  lastLogin DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  role Role? @relation(fields: [roleId], references: [id])
}

model User {
  id               String    @id @default(cuid())
  email            String    @unique
  name             String
  password         String
  phoneNumber      String?
  phoneVerified    Boolean   @default(false)
  phoneVerifiedAt  DateTime?
  roleId           String
  isActive         Boolean   @default(true)
  lastLogin        DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  createdBy        String?

  role Role @relation(fields: [roleId], references: [id])

  @@map("users")
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  isSystem    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users       User[]
  admins      Admin[]
  permissions RolePermission[]

  @@map("roles")
}

model Permission {
  id          String @id @default(cuid())
  name        String @unique
  description String?
  resource    String
  action      String

  roles RolePermission[]

  @@map("permissions")
}

model RolePermission {
  id           String @id @default(cuid())
  roleId       String
  permissionId String

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model Student {
  id                           String    @id @default(cuid())
  studentId                    String    @unique
  matriculationNumber          String?   @unique
  fullName                     String
  dateOfBirth                  DateTime
  age                          Int       @default(0)
  gender                       String
  address                      String
  grade                        String
  phoneNumber                  String    @unique
  emailAddress                 String    @unique
  emergencyContactName         String
  emergencyContactRelationship String
  emergencyContactPhone        String
  parentGuardianName           String?
  parentGuardianPhone          String?
  parentGuardianEmail          String?
  enrollmentDate               DateTime  @default(now())
  graduationYear               Int?
  currentClass                 String?
  medications                  String?
  allergies                    String?
  specialNeeds                 String?
  dietaryRestrictions          String?
  parentalPermissionGranted    Boolean   @default(false)
  parentalPermissionDate       DateTime?
  isActive                     Boolean   @default(true)
  academicYear                 String
  qrCode                       String?
  attendanceMarked             Boolean   @default(false)
  attendanceMarkedAt           DateTime?
  attendanceMarkedBy           String?
  createdAt                    DateTime  @default(now())
  updatedAt                    DateTime  @updatedAt

  classSectionAllocations     ClassSectionAllocation[]
  classSectionParticipants    ClassSectionParticipant[]
  courseAllocations           CourseAllocation[]
  grades                      Grade[]

  @@map("students")
}

model Notification {
  id                String   @id @default(cuid())
  type              String
  title             String
  message           String
  priority          String   @default("medium")
  isRead            Boolean  @default(false)
  recipientId       String?
  metadata          String?
  authorizedBy      String?
  authorizedByEmail String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("notifications")
}

model Setting {
  id          String   @id @default(cuid())
  category    String
  key         String
  value       String
  type        String
  options     String?
  name        String
  description String?
  isSystem    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([category, key])
  @@map("settings")
}

model Message {
  id            String    @id @default(cuid())
  subject       String
  content       String
  senderEmail   String
  senderName    String
  recipientEmail String
  recipientName String
  senderType    String
  recipientType String
  status        String    @default("sent")
  error         String?
  sentAt        DateTime  @default(now())
  deliveredAt   DateTime?
  readAt        DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime @updatedAt

  @@map("messages")
}

model PlatoonEmailHistory {
  id             String   @id @default(cuid())
  platoonId      String
  subject        String
  message        String
  emailTarget    String
  recipientCount Int
  successCount   Int
  failedCount    Int
  sentBy         String
  senderName     String
  senderEmail    String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  platoon ClassSectionAllocation @relation(fields: [platoonId], references: [id], onDelete: Cascade)

  @@map("platoon_email_history")
}

model Course {
  id                String   @id @default(cuid())
  courseCode        String   @unique
  courseName        String
  subjectArea       String
  instructor        String
  maxStudents       Int
  currentEnrollment Int      @default(0)
  duration          Int
  platform          String
  meetingUrl        String?
  prerequisites     String?
  description       String?
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  courseAllocations CourseAllocation[]
  courseSessions    CourseSession[]

  @@map("courses")
}

model CourseAllocation {
  id          String   @id @default(cuid())
  studentId   String   @unique
  courseId    String
  allocatedAt DateTime @default(now())
  allocatedBy String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  course  Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("course_allocations")
}

model SystemConfig {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("system_config")
}

model SmsVerification {
  id          String   @id @default(cuid())
  phoneNumber String
  code        String
  expiresAt   DateTime
  attempts    Int      @default(0)
  verified    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("sms_verifications")
}

model Registration {
  id                           String   @id @default(cuid())
  fullName                     String
  dateOfBirth                  DateTime
  age                          Int      @default(0)
  gender                       String
  address                      String
  branch                       String
  phoneNumber                  String   @unique
  emailAddress                 String   @unique
  matriculationNumber          String?  @unique
  courseDesired                String?
  emergencyContactName         String
  emergencyContactRelationship String
  emergencyContactPhone        String
  parentGuardianName           String?
  parentGuardianPhone          String?
  parentGuardianEmail          String?
  parentalPermissionGranted    Boolean  @default(false)
  parentalPermissionDate       DateTime?
  isVerified                   Boolean  @default(false)
  verifiedAt                   DateTime?
  verifiedBy                   String?
  createdAt                    DateTime @default(now())
  updatedAt                    DateTime @updatedAt

  @@map("registrations")
}

model ClassSectionAllocation {
  id               String   @id @default(cuid())
  studentId        String
  classSectionName String
  allocatedAt      DateTime @default(now())
  allocatedBy      String
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  student                   Student                   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  classSectionParticipants  ClassSectionParticipant[]
  platoonEmailHistory       PlatoonEmailHistory[]

  @@map("class_section_allocations")
}

model ClassSectionParticipant {
  id             String   @id @default(cuid())
  studentId      String
  classSectionId String
  joinedAt       DateTime @default(now())
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  student      Student                @relation(fields: [studentId], references: [id], onDelete: Cascade)
  classSection ClassSectionAllocation @relation(fields: [classSectionId], references: [id], onDelete: Cascade)

  @@map("class_section_participants")
}

model Teacher {
  id         String   @id @default(cuid())
  teacherId  String   @unique
  fullName   String
  email      String   @unique
  phone      String
  subject    String
  hireDate   DateTime @default(now())
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  teacherSubjects TeacherSubject[]
  grades          Grade[]
  courseSessions  CourseSession[]

  @@map("teachers")
}

model Subject {
  id          String   @id @default(cuid())
  subjectCode String   @unique
  subjectName String
  description String?
  credits     Int?     @default(1)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  teacherSubjects TeacherSubject[]
  grades          Grade[]
  courseSessions  CourseSession[]

  @@map("subjects")
}

model TeacherSubject {
  id        String   @id @default(cuid())
  teacherId String
  subjectId String
  createdAt DateTime @default(now())

  teacher Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  subject Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@unique([teacherId, subjectId])
  @@map("teacher_subjects")
}

model Grade {
  id          String   @id @default(cuid())
  studentId   String
  subjectId   String
  teacherId   String
  gradeValue  Float
  maxGrade    Float    @default(100)
  gradeType   String
  description String?
  gradedAt    DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  subject Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  teacher Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@map("grades")
}

model CourseSession {
  id        String   @id @default(cuid())
  subjectId String
  teacherId String
  courseId  String
  startTime DateTime
  endTime   DateTime
  dayOfWeek String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subject Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  teacher Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  course  Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("course_sessions")
}

model CalendarEvent {
  id                String   @id @default(cuid())
  title             String
  description       String?
  eventType         String
  startDate         DateTime
  endDate           DateTime
  isRecurring       Boolean  @default(false)
  recurrencePattern String?
  academicYear      String
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("calendar_events")
}

model LoginAttempt {
  id          String    @id @default(cuid())
  email       String
  ipAddress   String
  attempts    Int       @default(0)
  lastAttempt DateTime  @default(now())
  lockedUntil DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([email, ipAddress], name: "email_ip")
  @@map("login_attempts")
}